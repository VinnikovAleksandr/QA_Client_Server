HW
Client_Server

----- 1) Прочитать про клиент-серверную архитектуру

Сборное понятие, состоящее из двух взаимодополняющих компонентов: сервера и клиента.
КЛИЕНТ – локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных или выполнения определенной группы системных действий.
СЕРВЕР – очень мощный компьютер или специальное системное оборудование, которое предназначено для разрешения определенного круга задач по процессу выполнения программных кодов. Он выполняет работы сервисного обслуживания по клиентским запросам, предоставляет пользователям доступ к определенным системным ресурсам, сохраняет данные или БД.
Особенности такой модели заключаются в том, что пользователь отправляет определенный запрос на сервер, где тот системно обрабатывается и конечный результат отсылается клиенту. В возможности сервера входит одновременное обслуживание сразу нескольких клиентов.
Если одновременно поступает более одно запроса, то такие запросы устанавливаются в определенную очередь и сервером выполняются по очереди. Порой запросы могут иметь свои собственные приоритеты. Часть запросов с более высокими приоритетами будут постоянно выполняться в первоочередном порядке.
Архитектура системы клиент-сервер формулирует принципы виртуального общения между локальными компьютерами, а все правила и принципы взаимодействия находятся внутри протокола.
Сетевой протокол – это особый набор правил, на основании которого выполняется точное взаимодействие между компьютерами внутри виртуальной сети.


----- 2) Что такое HTTP и HTTPS

HTTP (с англ. HyperText Transfer Protocol) – протокол передачи гипертекста – это прикладной протокол передачи данных в сети. Его используют для получения информации с веб-сайтов. Этот протокол основан на использовании технологии «клиент-сервер»: клиент, который отправляет запрос, является инициатором соединения; сервер, который получает запрос, исполняет его и отправляет клиенту результат.

HTTPS (с англ. HyperText Transfer Protocol Secure) – безопасный протокол передачи гипертекста – это расширение протокола HTTP, которое поддерживает шифровку при помощи криптографических протоколов SSL и TLS.

Чем отличается HTTP от HTTPS:
- HTTPS не является отдельным протоколом передачи данных, а является расширением протокола HTTP с надстройкой шифрования;
- данные, которые передаются по протоколу HTTP, не защищены, а HTTPS обеспечивает конфиденциальность информации при помощи шифрования;
- HTTP использует порт 80, HTTPS – порт 443.

Обеспечения безопасной передачи данных требуют сайты, где вводят и передают конфиденциальную информацию (личные данные пользователей, детали доступа, реквизиты платежных карт) – на любых сайтах с авторизацией, взаимодействием с платежными системами, почтовыми сервисами. Шифрование таких данных позволяет избежать их перехвата и использование третьими лицами.
Для реализации передачи данных при помощи HTTPS на веб-серверы, которые обрабатывают запросы клиентов, должен быть установлен специальный SSL-сертификат.


----- 3) HTTP методы

Метод HTTP является обязательным параметром стартовой строки запроса. Метод можно назвать типом запроса и, исходя из этого типа, должно произойти какое-то действие на сервере и вернутся ответ клиенту.
При получении запроса сервер пытается определить метод запроса, и если ему это не удается, то возвращает ответное сообщение с кодом 501 и фразой Not Implemented. Если же сервер определил метод, но его невозможно применить к запрашиваемому ресурсу, то возвращается ответное сообщение с кодом 405 и фразой Method Not Allowed.

OPTIONS – определяет возможности и используемые методы веб-сервера. В ответном сообщении должен быть добавлен заголовок Allow с перечислением всех поддерживаемых сервером методов.

Пример запроса:
OPTIONS * HTTP/1.1
Host: example.com

Пример ответа:
HTTP/1.1 200 OK
Allow: OPTIONS, GET, HEAD, POST, PUT, PATCH, DELETE, TRACE

GET – запрашивает содержимое конкретного ресурса, получает данные и никак не должен изменять эти данные.

Пример запроса:
GET /text.txt HTTP/1.1
Host: example.com

Пример ответа:
HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

Title: Заголовок файла
Text: Текст файла

HEAD – похож на GET, но не возвращает тело ответа, а только стартовую строку и заголовки. Используется для получения метаданных, а также проверки и валидации ресурса.

Пример запроса:
HEAD /text.txt HTTP/1.1
Host: example.com

Пример ответа:
HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

POST – создает новый ресурс из переданных данных в запросе.

Пример запроса:
POST /text.txt HTTP/1.1
Host: example.com

Title=Заголовок+файла
Text=Текст+файла

Если был создан ресурс (в данном случае файл text.txt), то нужно вернуть сообщение ответа с кодом состояния 201 Created и заголовком Location, указывающим на этот ресурс.

HTTP/1.1 201 Created
Location: /text.txt

Если же URI не изменился, а были созданы данные, то серверу следует вернуть ответ с кодом состояния 200 ОК и информацией с итогом выполнения запроса в теле сообщения.

HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

Добавлен контент в пустой файл «text.txt»

PUT – изменяет содержимое запроса по указанному URI.

PUT /text.txt HTTP/1.1
Host: example.com

Title=Новый+заголовок+файла
Text=Новый+текст+файла

Если ресурс был изменен, то возвращается сообщение ответа с кодом состояния 200 ОК или 204 No Content.

HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

Изменен контент в файле «text.txt»

PATCH – похож на PUT, но применяется только к фрагменту ресурса.

Пример запроса:
PATCH /text.txt HTTP/1.1
Host: example.com

Title=Новый+заголовок+файла

Пример ответа:
HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

Изменен заголовок в файле «text.txt»

Таким образом изменен был только Title, а Text остался прежним.

DELETE – удаляет конкретный ресурс по указанному URI.

Пример запроса:
DELETE /text.txt HTTP/1.1
Host: example.com

Пример ответа:
HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8

Файл «text.txt» удален

TRACE – возвращает служебную отладочную информацию о том, какие данные добавляют или изменяют прокси-серверы в запроси.

Пример запроса:
TRACE / HTTP/1.1
Host: example.com

Пример ответа:
HTTP/1.1 200 OK
Content-Type: message/http

TRACE / HTTP/1.1
Host: example.com

CONNECT – запускает двухстороннюю связь с запрошенным ресурсом. Метод обычно используется для открытия прозрачного TCP/IP-туннеля.

CONNECT server.example.com:80 HTTP/1.1 
Host: server.example.com:80


----- 4) HTTP статус коды сервера

Код состояния HTTP (Status Cod HTTP) – это трехзначное число, с которого начинается любой ответ сервера на запрос по протоколу HTTP. Код кратко сообщает суть ответа – был ли выполнен запрос или возникла ошибка.

Коды ответов HTTP деляться на 5 классов. В каждом из них объединены сообщения с похожими значениями. Краткое описание каждого из классов:

1хх – информационные коды. Сообщают о прогрессе выполнения запроса.
HTTP 100 Continue – продолжить. Означает, что сервер получил начальную часть запроса и готов принять остальную его часть. Отправляется при наличии в запросе заголовка Expect.
HTTP 101 Switching Protocols – «Приключить протокол». Означает, что сервер меняет протокол. Отправляется при наличии в запросе заголовка Upgrade.

2хх – коды успешно выполненных запросов. Сообщают о том, что все в порядке и работает, как ожидалось.
HTTP 200 OK – «Успешно». Сервер успешно обработал запрос и создал новый ресурс.
HTTP 201 Created – «Создано». Сервер успешно обработал запрос и создал новый ресурс.
HTTP 202 Accepted – «Принято». Сервер начал обрабатывать запрос, но пока ещё не закончил процесс. В конечном итоге обработка запроса может как завершиться, так и не завершиться.

3хх – коды перенаправлений. Сообщают о том, что запрашиваемая страница переехала и нужно сделать еще один запрос по новому URL.
HTTP 300 Multiple Choices – «Множественный выбор». Сервер присылает такой код, когда есть несколько возможных ответов на запрос.
HTTP 301 Moved Permanently – «Перемещено навсегда». Запрашиваемый ресурс теперь доступен по новому URL и при последующих запросах стоит использовать именно его.
HTTP 302 Found – «Найдено». Раньше этот код назывался 302 Moved Temporarily – «Перемещено временно». Запрашиваемый ресурс временно доступен по другому URL и при последующих запросах стоит использовать старый URL.

4хх – коды ошибок клиента. Сообщают об ошибке на стороне пользователя, который отправил запрос.
HTTP 400 Bad Request – «Неверный запрос». Сервер не может обработать запрос, потому что не понимает его. Например, из-за синтаксической ошибки.
HTTP 403 Forbidden – «Запрещено». Сервер отказывается обработать запрос, потому что у пользователя нет прав на просмотр содержимого.
HTTP 404 Not Found – «Не найдено». Сервер не может найти запрашиваемый ресурс.

5хх – коды ошибок сервера. Сообщают об ошибке на стороне сервера, который обрабатывал запрос.
HTTP 500 Internal Server Error – «Внутренняя ошибка сервера». Сервер столкнулся с непредвиденной ошибкой во время обработки запроса.
HTTP 502 Bad Gateway – «Неверный шлюз». Сервер получил некорректный ответ от вышестоящего сервера.
HTTP 503 Service Unavailable – «Сервис недоступен». Сервер недоступен, потому что перегружен или на нем проводяться технические работы.
HTTP 504 Gateway Timeout – «Шлюз не отвечает». Сервер не получил своевременного ответа от вышестоящего сервера и закрыл соединение.


----- 5) Что такое ядро браузера

Браузер = оболочка + ядро
Оболочка относится к оболочке браузера: например, меню, панели инструментов и т.д. Он в основном предназначен для работы с пользовательским интерфейсом, настройки параметров и т.д. Он вызывает ядро для реализации различных функций. Ядро – это ядро браузера. Ядро – это программа или модуль, который отображает контент на основе языка разметки.
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета) и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т.д.), организацию информации (например, добавление CSS и т.д.) и расчет режима отображения веб-страницы, а затем вывод ее на монитор или принтер. Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга будет другим. Все веб-браузеры, почтовые клиенты и другие приложения, которыми необходимо редактировать и отображать сетевой контент, требуют ядра. Движок JS анализирует язык Javascript для достижения динамических эффектов веб-страницы.
Механизм рендеринга определяет, как браузер отображает содержимое веб-страницы и информацию о формате страницы.
Разные ядра браузеров по-разному интерпретируют синтаксис записи веб-страниц, поэтому эффект рендеринга (отображения) одной и той же страницы в браузерах разных ядер также может быть различным.


----- 6) Какие браузеры какие ядра используют

Blink – это многоплатформенное ядро, разработанное компаниями Google, Opera, Adobe, Intel & Samsung. Его можно найти как в Chrome, так и в Opera.

EdgeHTML принадлежит Microsoft. Он разработан специально для использования в браузере Edge. EdgeHTML заменил Trident (в Internet Explorer) в 2015 году. Теоретически он полностью совместим с Blink и WebKit.

Gecko – предложение Mazilla. Ядро в Firefox, Thunderbird и в ещё нескольких малоизвестных браузерах.

Webkit – это ядро Apple. Используется в Safari, Amazon Kindle Browser, Tizen Smart TV и Blackberry OS. С 2013 года он также движок браузера Chrome.

В каждом браузере также используется JavaScript. Это оказывает наибольшее влияние на то, как быстро браузер может загружать веб-страницу. JavaScript отвечает за преобразование кода JavaScript сайта в оптимизированный вывод, который браузер может интерпретировать за минимальное время

----- 7) Что такое API

API расшифровывается как «Application Programming Interface» или «Интерфейс программирования приложений» - это совокупность инструментов и функций в виде интерфейса для создания новых приложений, благодаря которому одна программа будет взаимодействовать с другой.
Большинство крупных компаний разрабатывают API для клиентов или для внутреннего использования. Обычные пользователи тоже применяют разные API.
Когда пользователь посещает любую страницу в интернете, он взаимодействует с API удаленного сервиса. Это составляющая сервера, которая получает запросы и отправляет ответы. Кроме того, благодаря API человек может совершать различные действия, не покидая сайт.

Как работает API
Интерфейс представляет собой промежуточный слой между двумя приложениями. Он позволяет двум программам обмениваться информацией и выполнять функции, не раскрывая своего внутреннего API.

Методы взаимодействия с API:
1.	Процесс, который может выполнять программа при помощи этого интерфейса.
2.	Данные, которые нужно передать интерфейсу для выполнения им функции.
3.	Данные, которые программа получит на выходе после работы с API.

Для чего используют API:
Разработчикам программный интерфейс помагает:
- упростить и ускорить выпуск новых продуктов, так как можно использовать уже готовые API для стандартных функций;
- сделать разработку более безопасной, выведя ряд функций в отдельное приложение, где они будут скрыты;
- упростить настройку связей между разными сервисами и программами и не сотрудничать для разработки своего продукта с создателями различных приложений;
- сэкономить деньги, так как не нужно разрабатывать все программные решения с нуля.

Примеры API: Гугл календарь, заказ авиабилетов, навигация на сайтах и в приложениях, кнопки авторизации.


----- 8) Что такое эндпоинты

End point (конечные точки) – это само обращение к маршруту отдельным HTTP методом (такие как GET, POST, PUT, DELETE и т.д.).
Один и тот же ресурс обычно имеет множество связанных конечных точек, каждая из которых имеет разные пути и методы, но возвращает различную информацию об одном и том же ресурсе. Конечные точки обычно имеют краткие описания, похожие на общее описание ресурса, только еще короче. Кроме того, конечная точка показывает только конечный путь URL ресурса, а не базовый, общий для всех конечных точек, путь.

Для конечной точки обычно перечисляют методы. Метод определяет работу с ресурсом. Вкратце каждый метод выглядит следующим образом:
- GET: получает ресурс;
- POST: создает ресурс;
- PUT: обновляет или создает в существующем ресурсе;
- PATCH: частично изменяет существующий ресурс;
- DELETE: удаляет ресурс.

Конечная точка показывает только конечный путь. Полный путь, который содержит как базовый путь, так и конечную точку, часто называют URL-адресом ресурса. 


----- 9) URL (URI, URL, URN)

URI (Uniform Resource Identifier) – это строка символов, которая используется для идентификации какого-либо ресурса по его адресу или по имени, либо по тому и тому вместе.

URL (Uniform Resource Locator) – это строка символов, которая используется для идентификации какого-либо ресурса, но только по его адресу, по его местоположению.

URN (Uniform Resource Name) – это строка символов, которая используется для идентификации какого-либо ресурса, но только по его имени.

Любой URL состоит из нескольких компонентов. Протокол и Хост являются обязательными, все остальные (порт, URL-путь, параметры запроса, якорь) – нет.

URN служит для обозначения уникального имени ресурса, неважно, где этот ресурс располагается в данный момент времени или вообще. Такая природа URN (независимость от адреса) позволяет ресурсам перемещаться с одного места на другое. URN позволяет получить доступ к ресурсу по различным сетевым протоколам, обращаясь к одному и тому же имени.
На сегодня URN все еще считается экспериментальным и не так сильно распространен, как URL, так как для полной поддержки URN требуются поддерживающая его развитая сетевая инфраструктура.


----- 10) Идемпотентные HTTP методы

Метод считается «идемпотентным», если эффект на север от одного запроса такой же как от нескольких идентичных запросов такого типа. Другими словами, если многократное повторение одних и тех же запросов возвращает одинаковые результаты, то метод считается идемпотентным.
К идемпотентным HTTP методам относятся: DELETE, GET, HEAD, OPTIONS, PUT, TRACE.


----- 11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции «только чтение».
К безопасным методам относятся: GET, HEAD, OPTIONS. Все безопасные методы являются также идемпотентными.
Даже если безопасные методы являются по существу «только для чтения», сервер всё равно может сменить свое состояние: например, он может сохранять статистику. Что существенно, так то, когда клиент вызывает безопасный метод, то он не запрашивает никаких изменений на сервере, и поэтому не создает дополнительную нагрузку на сервер.
Безопасные методы не обязательно должны обрабатывать только статичные файлы, сервер может генерировать ответ «на лету», пока скрипт, генерирующий ответ, гарантирует безопасность: он не должен вызывать внешних эффектов, таких как формирование заказов, отправка писем и т.д.

Вызов безопасного метода, не меняющего состояние сервера:
GET /pageX.html HTTP/1.1

Вызов небезопасного метода, который может поменять состояние сервера:
POST /pageX.html HTTP/1.1

Вызов идемпотентного, но небезопасного метода:
DELETE /idX/delete HTTP/1.1


----- 12) Идентификация, Аутентификация, Авторизация

Идентификация – это процедура распознавания субъекта по его идентификатору (это определение логина, имени или номера).
Когда нам звонят с неизвестного номера, что мы делаем? Правильно, спрашиваем «Кто это», т.е. узнаем имя (а именно, идентификатор). А ответ собеседника будет идентификация.
Идентификатором может быть: номер телефона, номер паспорта, e-mail, номер страницы в соц. сети и т.д.

Аутентификация – это процедура проверки подлинности (пользователя проверяют с помощью пароля, письмо проверяют по электронной подписи и т.д.).
Чтобы определить чью-то подлинность, можно воспользоваться тремя факторами:
1)	Пароль – то, что мы знаем (слово, PIN-код, код для замка, графический ключ);
2)	Устройство – то, что мы имеем (пластиковая карта, ключ от замка, USB-ключ);
3)	Биометрика – то, что является частью нас (отпечаток пальца, портрет, сетчатка глаз).

Авторизация – это предоставление доступа к какому-либо ресурсу (например, к электронной почте).
Примеры авторизации:
- открытие двери после проворачивания ключа в замке;
- доступ к электронной почте после ввода пароля;
- разблокировка смартфона после сканирования отпечатка пальца;
- выдача средств в банке после проверки паспорта и данных о счете.


----- 13) Что такое IP

IP (Internet Protocol)-адрес – это уникальный идентификатор сетевого узла в публичной или в частной компьютерной сети, которая построена на базе стека протоколов TCP/IP. Это адрес компьютера, сервера или ещё какого-нибудь сетевого оборудования. Служит для того, чтобы упорядочить устройства в сети.
IP-адрес является 32-битовым (стандарт IPv4, 32 значения из нулей и единиц) или 128-битовым (стандарт IPv6) десятичным числом. Разница между стандартами заключается в формате записи и объеме адресного пространства. Количество возможных адресов в IPv4 превышает 4 млрд. У IPv6 объем адресного пространства в сотни раз больше.
IP адрес по стандарту IPv4 представляет собой десятичное число. Для простоты запоминания 32-битовое число решили разделить на четыре части, каждая из которых состоит из 8 бит.
Пример IP-адреса – 226.162.43.158.

IP-адреса могут быть частными или публичными. Последние используются для присвоения адресов узлам в глобальной сети Интернет. Частные предназначены для локальных сетей, которые не подключены к Интернет. Основное отличие между ними в том, что компьютерам в локальной сети можно присвоить любой номер. 
IP-адреса бывают статическими и динамическими.


----- 14) Что такое порт, сколько портов у Linux сервера

Порт сервера – это цифровой идентификатор (набор цифр до 16 бит) программы, которая используется для создания определенного интернет соединения привязанного к IP-адресу.
Каждое устройство имеющее вход в сеть имеет свой IP. Порты служат для установления нескольких таких соединений. В свою очередь с помощью них сервер на котором расположен сайт создает соединение сервер – ПК. Данный канал служит для обмена данными между ПК и удаленным сервисом.

Количество портов ограничено с учётом 16-битной адресации (216=65536, начало — «0»). Все порты разделены на три диапазона — общеизвестные (или системные, 0—1023), зарегистрированные (или пользовательские, 1024—49151) и динамические (или частные, 49152—65535).


----- 15) Уровни OSI

Сетевая модель OSI – сетевая модель сетка (магазина) сетевых протоколов OSI/ISO. Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом. Модель определяет различные уровни взаимодействия систем.

Всего в модели сетевого взаимодействия выделяют 7 уровней:

Физический – на самой нижней ступени находится физический уровень. Он занимается непосредственно передачей информации. Здесь сигналы уходят от отправителя к получателю. На текущем уровне речь идет о кабелях, радиоэфире, кодировании 0 и 1… Один из основных стандартов физического уровня – Ethernet.

Канальный (Data Link) – после получения сигнала с предыдущего физического уровня, на следующем уровне происходит проверка и исправление погрешностей передачи. Здесь появляются термины «фрейм» и «МАС-адрес». В данному уровне выделяют 2 подуровня управления: LLC (логическим каналом) и MAC (доступом к среде).

Сетевой (Network) – над канальным идет сетевой уровень. На этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Здесь осуществляется маршрутизация трафика. Когда пользователь желает перейти на сайт и вводит его адрес, отправляется DNS-запрос. Ответ на него будет IP-адрес, которые подставляется в пакет. Пакет данных это новый термин, который появляется в сетевом уровне.

Транспортный (Transport) – здесь происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, размеры которых будут зависеть от использованного протокола. Для транспортного уровня это TCP и UDP. 

Сеансовый (Session) – в ответе за организацию сеансов связи между приложениями на компьютерах. Он отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы. К протоколам сеансового уровня относятся: X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP.

Уровень представления (Presentation) – на шестой ступени осуществляется преобразование форматов данных, например, сжатие и кодирование.

Уровень приложения (Application) – верхний уровень модели, где располагаются сетевые службы, с которыми напрямую взаимодействуют пользователи. Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи данных (FTP, TFTP) и другие.

Когда осуществляется передача с верхнего на нижний уровень, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией.


----- 16) Хедеры http запросов

HTTP-сообщения (запросы и ответы) состоят из трех компонентов:
1)	Стартовой строки (тип запроса или результат ответа);
2)	Набора заголовков содержащих все требуемые параметры;
3)	Тела (основного содержимого), причем блок заголовков должен отделяться пустой строкой от тела.

Заголовки HTTP-сообщения позволяют указать множество дополнительной информации, которую следует знать клиенту и серверу друг о друге и передаваемых данных.

Классификация HTTP заголовков:
Общие заголовки – это HTTP заголовки, которые применяются и в HTTP-запросах клиентов и в HTTP-ответах серверов. Назначение – передача общих сведений о HTTP-сообщении.
- Cache-Control — настройки кеширования;
- Pragma — используется для обратной совместимости с кешами HTTP/1.0, т.к. заголовок для настройки кеширования (Cache-Control) появился только в HTTP/1.1;
- Warning — содержит предупреждения о возможных проблемах;
- Connection — определяет, остается ли сетевое соединение открытым после завершения текущей транзакции…

Заголовки запроса – это заголовки, которые применяются только в HTTP-запросах. Назначение: оповещение сервера о клиенте и о том, какая информация/услуги ему нужна.
- Authorization — содержит учетные данные для аутентификации клиента на сервере;
- Proxy-Authorization — cодержит учетные данные для аутентификации клиента на прокси-сервере;
- If-Match — делает запрос условным и применяет метод, только если сохраненный ресурс соответствует одному из заданных ETag;
- Accept — информирует сервер о типах данных, которые могут быть отправлены обратно;
- Expect — указывает на ожидания, которые должны быть выполнены сервером для правильной обработки запроса;
- Cookie — содержит сохраненные файлы cookie, ранее отправленные сервером с заголовком «Set-Cookie»;

Заголовки ответа – это заголовки, которые применяются только в HTTP-ответах, например «Age», «Location», «Server». Назначение: оповещение клиента о сервере и о результате обработки запроса.
- WWW-Authenticate — определяет метод аутентификации, который должен использоваться для доступа к ресурсу;
- Age — количество секунд в течении которых объект находился в прокси-кэше;
- Expires — содержит дату и время после которых ответ считается устаревшим;
- ETag — содержит идентификатор для конкретной версии ресурса. Используется для повышения эффективности кеширования;
- Vary — определяет, как сопоставить заголовки запроса, чтобы решить, можно ли использовать кэшированный ответ, а не запрашивать новый с исходного сервера.
